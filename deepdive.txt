16장
내부 슬롯과 내부 메서드 
    내부 슬롯과 내부 메서드 ->엔진의 구현 알고리즘을 설명하기 위해 이크마스킈립트 사양에서 사용하는 의사프로퍼티와 의사메서드 [[]] 이거
    내부 슬롯과 내부 메서드는 자바스크립트 엔진의 내부로직 이므로 원칙적으로 자바스크립트는 내부 슬롯과 내부 메서드 에 직접적으로 접근하거나
    호출할 수 있는 방법을 제공하지 않음 단 일부는 가능

객체 변경 방지
    객체는 변경 가능한 값이므로 재할당 엇이 직저 변경할 수 있다.
    객체 확장금지 
    - object.prerventExtensions 메서드는 객체의 확장을 금지한다 즉, 확장이 금지된 객체는 프로퍼티 추가가 금지.
    객체 밀봉 
    - object.seal 매서드는 객체를 밀봉한다 즉, 밀봉ㄷ딘 객체는 읽기와 쓰기만 가능.
    객체 동결
    - object.freeze 메서드는 객체를 동결한다 즉, 동결된 객체는 읽기만 가능하다.

17장
생성자 함수에 의한 객체 생성 
    생성자의 함수란 연산자와 함께 호출하여 객체(인스턴스)를 생성하는 함수
    new 연산자와 함께 호풀하면 해당 함수는 생성자 함수로 동작한다
    - this
    함수 호출 방식               this가 가리키는 값
    
    일반 함수 호출                전역객체
    메서드 호출                  메서드를 호출한 객체 (마침표 앞의 객체)
    생성자 함수 호출              생성자 함수가 생성할 인스턴스

    인스턴스 생성과 this바인딩 // 바인딩이란  => 식별자와 값을 연결하는 과정 
    - 암묵적으로 빈 객체가 생성
    인스턴스의 초기화 
    - 생성자 함수에 기술되어 있는 코드가 한줄씩 실행되어 this에 바인딩 되어 있는 인스턴스를 초기화한다.
    인스턴스 반환
    - 생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인된 this가 암묵적으로 반환한다.
    -생성자 함수 내부에서 return문읠 반드시 생략

    함수는 객체이지만 일반객체와는 다르다. 일반객체는 호출 할 수 없지만 함수는 호출할 수 있다.
    함수가 일반함수로서 호출되면 함수 객체의 내부 메서드 [[call]]이 호출이 되고,
    new 연산자와 함께 생성자 함수로서 호출되면 내부메서드 [[Construct]]가 호출된다.

    constructor 와 non-constructor의 구분
    constructor 함수 선언문, 함수표현식, 클래스
    non-constructor 메서드,화살표함수

    new 연산자

18장
함수와 일급객체
    일급객체란?
    무명의 리터럴로 생성할 수 있다. 즉 ,런타임 생성이 가능
    변수나 자료구조(=객체,배열)에 저장할 수 있다
    함수의 매개변수에 전달할 수 있다
    함수의 반환값으로 사용할 수 있다
    일반객체는 호출할 수 없지만 함수객체는 호출할 수 있다.

    함수객체의 프로퍼티                                                유사배열 객체란? length프로퍼티를 가진 객체로 for문으로 순회할 수 있는 객체
    - arguments 프로퍼티 객체는 함수 호출 시 전달된 인수들의 정보를 담고 있는 순회가능한 유사배열객체이며,
    함수 내부에서 지역변수 처럼 사용된다.
    - 선언 된 매개변수의 개수보다 인수를 적게 전달한 경우(multiply(),multiply(1)) 인수가 전달되지 않은 매개변수는 undefined로 초기화된 상태를 유지
            매개변수의 객수보다 인수를 많이 전달한 경우(multiply(1,2,3)) 초과된 인수는 모두 무시
    - arguments객체는 매개변수 개수를 확정할 수 없는 가변인자 함수를 구현할때 유용하다

    length 프로퍼티
    - 함수를 정의할 때 선언한 매개변수의 개수를 가리킨다
    - arguments 객체의 length 프로퍼티는 인자의 개수를 가리키고,
      함수 객체의 length 프로터티는 매개변수의 개수를 가리킨다.
    
    name 프로퍼티
    - 함수의 이름을 나타낸다. 
    - 함수 객체를 가리키는 식별자로 호출

19장
프로토타입
    객체지향 프로그래밍? -> 필요한 속성만 간추려 내어 표현하는 것 = 추상화
    - 전통적인 명령형 프로그래밍의 절차지향적 관점에서 벗어나 여러개의 독립적 단위, 
      즉, 객체의 집합으로 프로그래밍을 표현하려는 프로그래밍 패러다임
    - 속성을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조라 하며, 
      객체지향 프로그래밍은 독립적인 객체의 집합으로 프로그램을 표현
    - 객체는 상태 데이터와 동작을 하나의 논리적인 단위로 묶ㅇ느 복합적인 자료구조

    상속과 프로토타입
    - 어떤 객체의 프로퍼티 또는 메서드를 다른 객쳋가 상속받아 그대로 사용할 수 있는 것을 말한다

    프로토타입 객체
    - 프로토 타입객체 (=프로토타입) 어떤 객체의 상위(부모) 객체의 역할을 하는 객체 
    - 모든 프로토 타입은 생성자 함수와 연결되어 있다

    __proto__ 접근자 프로퍼티
    - __proto__는 접근자 프로퍼티다
    - __proto__ 접근자 프로퍼티는 상속을 통해 사용된다
    - __proto__ 접근자 프로퍼티를 통해 프로토타입에 접근하는 이유
      상호참조에 의해 프로토타임 체인이 생성되는 것을 방지
    - __proto__ 접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장하지 않는다

    함수객체의 prototype 프로퍼티
    - 함수객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토 타입을 가리킨다

    프로토타입의 constructor 프로퍼티와 생성자함수
    - constructor 프로퍼티가 가리키는 생성자 함수는 인스턴스르 생성한 생성자 함수이다.
    - 프로토타입돠 생성자함수는 단독으로 존재할 수 없고, 언제나 쌍으로 존재한다. 
    - 프로토타입은 생성자 함수가 생성되는 시점에 더불어 생성된다.
    - 생성자 함수로서 호출할 수 있는 함수, 즉 constructor은 함수 정의가 평가되어 객체함수를 생성하는 시점에 프로토타임도 더불어 생성된다
    - 생성자 함수에 의해 새애성되는 객체의 프로토 타입은 생성자 함수의 prototype  프로퍼티에 바인딩 되어있는 객체다
    - 프로토타입은 객체다. 따라서 일반 객체와 같이 프로토타입에서도 프로퍼티를 삭제/추가 할 수 있다.
      삭제/ 추가된 프로퍼티는 프로토타입 체인에 즉각 반영된다.
    
    프로토타입 체인
    - 프로토타입 체인은 상속된 프로퍼티 검색을 위한 매커니즘
      스코프 체인은 식별자 검색을 위한 매커니즘
    - 내부슬롯의 참조를 따라 자신의 부모 역할으 하는 프로토타입의 프로퍼티를 순차적으로 검색한다
      [[prototype]] 내부슬롯의 값은 null
    - 스코프 체인과 프로토타입 체인은 서로 연관없는 것이 아니라 서로 협력하여 식별자와 프로퍼티를 검색하는데에 사용된다.

    instanceo 연산자
    - 생성자 함수의 prototype에 바인딩된 객체가 프로토타입 체인상에 존재하는지 확인한다.
    
    object.create 메서드
    - new 연산자가 없어도 객체를 생성
    - 프로토타입을 지정하면서 객체를 생성
    - 객체 리터럴에 의해 생성된 객체도 상속받을 수 있다

    정적 프로퍼티/메서드
    - 정적 프로퍼티/메서드는 생성자 함수가 생성한 인스턴스 참조/호출할 수 없다.
    - 인스턴스의 프로토타입 체인에 속한 객체의 프로퍼티/메서드가 아니므로 인스턴스로 접근 불가

    프로퍼티 존재확인
    - in 연산자 사용 => key in object

    프로퍼티 열거
    - for ... in 문 => for (변수선언문 in 객체)
     객체의 모든 프로퍼티를(프로퍼티 개수만큼) 순회하며 열거하려면 사용 
    - 객체의 프로토타입 체인상에 존재하는 모든 프로토타입의 프로퍼티 중에서 프로퍼티 어트리뷰트의 값이 true인 프로퍼티를 순회하며 열거한다
    - for ... in 문은 프로퍼티를 열거할때 순서를 보장하지 않는다.(하지만 대부분 모던 브라우저는 순서를 보장)

20장
strict mode
    - 엄격모드, 암묵적 전역 => 선언하지 않은 변수를 참조하면 에러발생
    - 전역에 scrict mode를 적용하는것은 피하자
    - 함수단위로 scrict mode를 적용하는 것도 피하자

21장
빌트인 객체
    - 표준 빌트인 객체 : string, Number, Boolean, Fucntion, Array, Data
    - 표준 빌트인 객체는 인스턴스 없이도 호출이 가능한 빑인 정적 메서드를 제공한다
    
    원시값과 래퍼 객체
    - 문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체

    전역객체 
    - 계층적 구조상 어떤 객체에도 속하지 않은 모든 빌트인 객체의 최상위 객체다.
    
    빌트인 전역 함수
    - eval 자바스크립트 코드를 나타내는 문자열을 인수로 받는다 
    - eval 함수는 기존의 스코프를 런타임에 동적으로 수정한다.
    - isFinit 전달받은 인수가 정상적인 유한수 인지 검사하여 t, 무한수는 f로 반환(NaN은 f/ null은 숫자라 tttt)
    - isNaN 전달받은 인수가 NaN인지 검사하여 불리언타입을 반환
    - parseFloat  전달받은 문자열 인수가 부동 소수점 숫자, 즉 실수로 해석해서 반환
    - parseInt  전달받은 인수를 문자열, 문자열이 아니면 문자열로 변환한 다음 정수로 해석해서 반환

22장


                      






    